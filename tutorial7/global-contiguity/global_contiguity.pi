% Adapted from Constraint Solving and Planning with Picat, Springer 
% by Neng-Fa Zhou, Hakan Kjellerstrand, and Jonathan Fruhman
import cp.

main([Xstr]) => 
  X = map(to_int,Xstr),  
  global_contiguity(X),
  solve(X),
  println("ok").

global_contiguity(X) =>
  N = X.length,
  InputMax = 2,
  
  % Translate X's 0..1 to 1..2
  RegInput = new_list(N),
  RegInput :: 1..InputMax,  % 1..2
  foreach (I in 1..N) 
    RegInput[I] #= X[I]+1  
  end,

  % DFA for the regex "0*1*0*"
  Transition = [
    [1,2], % state 1: 0* 
    [3,2], % state 2: 1*
    [3,0]  % state 3: 0*
  ],
  NStates = 3,  
  InitialState = 1,
  FinalStates = [1,2,3],
  
  regular(RegInput,NStates,InputMax,Transition,InitialState,FinalStates).
