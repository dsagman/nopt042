import cp.

main => main(["primal"]).

main([Model]) => main([Model, "sample"]).

main([Model, Instance]) => 
    
    if Instance = "sample" then
        cl(sample_instance),
        sample_instance(SwimmerNames, StyleNames, Times)        
    elseif Instance = "random" then
        cl(random_instance),
        MinTime = 40,
        MaxTime = 80,
        N = 20,
        K = 20,    
        random_instance(N, K, MinTime, MaxTime, SwimmerNames, StyleNames, Times)
    else
        println("Unknown instance type")
    end,
    go(SwimmerNames, StyleNames, Times, Model).

go(SwimmerNames, StyleNames, Times, Model) =>
    
    printf("# %w model:\n", Model),

    if Model = "primal" then
        primal_model(StyleOfSwimmer, Times, TotalTime),
        solve([$min(TotalTime), StyleOfSwimmer]),
        printf("Total time: %d\n", TotalTime),
        foreach(I in 1..SwimmerNames.length)
            printf("Swimmer %w is swims %w\n", SwimmerNames[I], StyleNames[StyleOfSwimmer[I]])
        end
    elseif Model = "dual" then
        dual_model(SwimmerOfStyle, Times, TotalTime),
        solve([$min(TotalTime), SwimmerOfStyle]),
        printf("Total time: %d\n", TotalTime),
        foreach(J in 1..StyleNames.length)
            printf("Style %w is swum  by %w\n", StyleNames[J], SwimmerNames[SwimmerOfStyle[J]])
        end
    elseif Model = "channeling" then
        channeling(StyleOfSwimmer, SwimmerOfStyle, Times, TotalTime),
        solve([$min(TotalTime), StyleOfSwimmer ++ SwimmerOfStyle]),    
        printf("Total time: %d\n", TotalTime),
        foreach(I in 1..SwimmerNames.length)
            printf("Swimmer %w is swims %w\n", SwimmerNames[I], StyleNames[StyleOfSwimmer[I]])
        end,
        println("or in the dual view"),
        foreach(J in 1..StyleNames.length)
            printf("Style %w is swum  by %w\n", StyleNames[J], SwimmerNames[SwimmerOfStyle[J]])
        end
    else
        printf("Unknown model: %w\n", Model)
    end.


primal_model(StyleOfSwimmer, Times, TotalTime) =>
    N = Times.length,
    %K = Times[1].length,
    K = N,
    StyleOfSwimmer = new_array(N),
    StyleOfSwimmer :: 1..K,
    all_different(StyleOfSwimmer),

    TimeOfSwimmer = new_array(N),
    foreach(I in 1..N)
        matrix_element(Times, I, StyleOfSwimmer[I], TimeOfSwimmer[I])
    end,
    TotalTime #= sum(TimeOfSwimmer).

dual_model(SwimmerOfStyle, Times, TotalTime) =>
    N = Times.length,
    K = N,
    SwimmerOfStyle = new_array(K),
    SwimmerOfStyle :: 1..N,
    all_different(SwimmerOfStyle),

    TimeOfStyle = new_array(K),
    foreach(J in 1..K)
        matrix_element(Times, J, SwimmerOfStyle[J], TimeOfStyle[J])
    end,
    TotalTime #= sum(TimeOfStyle).

channeling(StyleOfSwimmer, SwimmerOfStyle, Times, TotalTime) =>    
    primal_model(StyleOfSwimmer, Times, TotalTime),
    dual_model(SwimmerOfStyle, Times, TotalTime),
    assignment(StyleOfSwimmer, SwimmerOfStyle).  %chanelling constraint

