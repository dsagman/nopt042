%todo finish
import cp.

main([N]) =>
    N := N.to_int, 
    langford_primal(N, Sequence),
    langford_dual(N, Position),
    channeling(N, Sequence, Position),
        
    time2(solve(Sequence ++ Position)),
    println(Sequence),
    println(Position).


langford_primal(K, Sequence) =>
    K2 = 2*K,
    Sequence = new_array(K2),
    Sequence :: 1..K,
    foreach(D in 1..K)
        element(I1, Sequence, D),
        element(I2, Sequence, D),
        I2 #= I1 + D + 1
    end.

langford_dual(K, Position) =>
    K2 = 2*K,
    Position = new_array(K2),
    Position :: 1..K2,
    foreach(D in 1..K)
        Position[D+K] #= Position[D] + D + 1
    end.

channeling(K, Sequence, Position) =>
    K2 = 2*K,
    foreach(D in 1..K)
        element(Position[D], Sequence, D),
        element(Position[D + K], Sequence, D)
    end.


