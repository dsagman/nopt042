import cp.

main([N]) =>
    N := N.to_int, % order of the plane
    projective_plane(N, Inc),       
    time2(solve([ff], Inc)),   
    output(Inc).

projective_plane(N, Inc) =>
    M = N*N + N + 1,
    K = N + 1,
    % incidence matrix: does point I lie on line J?
    Inc = new_array(M, M), 
    Inc :: 0..1,

    % there are 4 points which do not lie on 1 line 
    % WLOG it's the first 4 points (symmetry breaking)
    foreach(L in 1..M)
        at_most(3, [Inc[P, L] : P in 1..4], 1)
    end,

    
    % implicit (redundant), but very important constraints:    
    % - each point on exactly K lines
    % - each line has exactly K points
    foreach(P in 1..M)        
        PointInc = Inc[P],
        exactly(K, PointInc, 1) 
    end,
    foreach(L in 1..M)
        LineInc = [Inc[P, L] : P in 1..M],
        exactly(K, LineInc, 1)
    end,

    % every two points on exactly one line
    foreach(P1 in 1..M, P2 in 1..M, P1 #< P2)
        P1Inc = Inc[P1],
        P2Inc = Inc[P2],
        CommonLines = [P1Inc[L] #/\ P2Inc[L] : L in 1..M],      
        exactly(1, CommonLines, 1)
    end,

    % every two lines share exactly one point
    foreach(L1 in 1..M, L2 in 1..M, L1 #< L2)
        L1Inc = [Inc[P, L1] : P in 1..M],
        L2Inc = [Inc[P, L2] : P in 1..M],
        CommonPoints = [L1Inc[P] #/\ L2Inc[P] : P in 1..M],      
        exactly(1, CommonPoints, 1)
    end.
    
    

output(Inc) =>
    M = Inc.length,
    foreach(L in 1..M)
        LInc = [Inc[P, L] : P in 1..M], 
        println(LInc)
    end.
