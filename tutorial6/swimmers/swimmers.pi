import cp.

main =>
    cl(sample_instance),
    solve_primal,
    solve_dual,
    solve_channeling.

solve_primal =>
    sample_instance(SwimmerNames, StyleNames, Times),
    primal_model(StyleOfSwimmer, Times, TotalTime),
    solve([$min(TotalTime)], StyleOfSwimmer),
    println("\nPrimal model:"),
    foreach(I in 1..SwimmerNames.length)
        printf("Swimmer %w is swims %w\n", SwimmerNames[I], StyleNames[StyleOfSwimmer[I]])
    end.

solve_dual =>
    sample_instance(SwimmerNames, StyleNames, Times),
    dual_model(SwimmerOfStyle, Times, TotalTime),
    solve([$min(TotalTime)], SwimmerOfStyle),
    println("\nDual model:"),
    foreach(J in 1..StyleNames.length)
        printf("Style %w is swum  by %w\n", StyleNames[J], SwimmerNames[SwimmerOfStyle[J]])
    end.

solve_channeling =>
    sample_instance(SwimmerNames, StyleNames, Times),
    channeling_model(StyleOfSwimmer, SwimmerOfStyle, Times, TotalTime),
    solve([$min(TotalTime)], StyleOfSwimmer ++ SwimmerOfStyle),
    println("\nChanneling model:"),
    foreach(I in 1..SwimmerNames.length)
        printf("Swimmer %w is swims %w\n", SwimmerNames[I], StyleNames[StyleOfSwimmer[I]])
    end,
    println("or in the dual view"),
    foreach(J in 1..StyleNames.length)
        printf("Style %w is swum  by %w\n", StyleNames[J], SwimmerNames[SwimmerOfStyle[J]])
    end.


primal_model(StyleOfSwimmer, Times, TotalTime) =>
    N = Times.length,
    %K = Times[1].length,
    K = N,
    StyleOfSwimmer = new_array(N),
    StyleOfSwimmer :: 1..K,
    all_different(StyleOfSwimmer),

    TimeOfSwimmer = new_array(N),
    foreach(I in 1..N)
        matrix_element(Times, I, StyleOfSwimmer[I], TimeOfSwimmer[I]) 
        % matrix_element(Matrix, I, J, Entry)
    end,
    TotalTime #= sum(TimeOfSwimmer).


dual_model(SwimmerOfStyle, Times, TotalTime) =>
    N = Times.length,
    K = N,
    SwimmerOfStyle = new_array(K),
    SwimmerOfStyle :: 1..N,
    all_different(SwimmerOfStyle),

    TimeOfStyle = new_array(K),
    foreach(J in 1..K)
        matrix_element(Times, J, SwimmerOfStyle[J], TimeOfStyle[J])
    end,
    TotalTime #= sum(TimeOfStyle).


channeling_model(StyleOfSwimmer, SwimmerOfStyle, Times, TotalTime) =>    
    primal_model(StyleOfSwimmer, Times, TotalTime),
    dual_model(SwimmerOfStyle, Times, TotalTime),
    assignment(StyleOfSwimmer, SwimmerOfStyle).  %chanelling constraint

